/* eslint-disable @typescript-eslint/ban-ts-comment */
import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";
import { getOptionsForVote } from "../utils/getRandomStand";
import { useEffect, useState } from "react";
import type { Stand } from "./api/jjbaData";
import data from "../pages/api/data/all_data.json";
import jojoLogo from "../../public/jjba_pixel_logo.png";

const Home: NextPage = () => {
  const [ids, setIds] = useState([0, 0]);

  useEffect(() => {
    setIds(getOptionsForVote());
  }, []);

  const [first, second] = ids;

  console.log(...ids);

  const firstStand = trpc.data.getStandById.useQuery({ id: first });
  const secondStand = trpc.data.getStandById.useQuery({ id: second });

 const handleOpClick = (e: React.MouseEvent<HTMLButtonElement>) => {
    console.log("Clicked!", e);
  };

  function Stand(props: { stand: Stand }) {
    const stand = props.stand;
    console.log("props", props);
    if (!stand.stand_images[0]) {
      console.log(stand.stand);
    }
    return (
      <div className="flex flex-col items-center">
        <div className="stand-name mb-2 text-xl">{stand.stand}</div>
        <div className="stand-name mb-8 text-m opacity-90">{stand.stand_ja}</div>
        <div className="stand-picture-container relative mb-4 h-64 w-52">
          <Image
            className="rendering-pixelated rounded drop-shadow-2xl"
            src={`${stand.stand_images[0]}`}
            alt={`Picture of ${stand.stand}`}
            layout="fill"
            objectFit="contain"
            placeholder="blur"
            blurDataURL={`eZP%CbIU.Ax]RO%LWVa}ofof.9ofIAV@WBxuoekCR+WBtRjuROa|tS`}
          />
        </div>
        <button
          className="rounded-full border bg-slate-50  py-1 px-8 text-black hover:bg-slate-200"
          onClick={handleOpClick}
        >
          OP
        </button>
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="m-auto flex h-screen max-w-screen-sm flex-col justify-center gap-6">
        <div className="justify-right absolute top-0 right-0 flex flex-col p-4">
          <div className="title text-center text-4xl">OP-T3</div>
        </div>
        <div className="text-center text-2xl">Which Stand is more OP?</div>
        <div className="flex items-center justify-around p-8">
          {firstStand.isLoading ? (
            <h1 >Loading</h1>
          ) : (
            <Stand stand={firstStand.data} />
          )}
          <div className="p-8 italic">or</div>
          {secondStand.isLoading ? (
            <h1>Loading</h1>
          ) : (
            <Stand stand={secondStand.data} />
          )}
        </div>
      </div>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
