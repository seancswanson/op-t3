import { type NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { trpc } from "../utils/trpc";
import { getOptionsForVote } from "../utils/getRandomStand";
import { useEffect, useState } from "react";

const Home: NextPage = () => {
  const [first, second] = getOptionsForVote();
  const [ids, setIds] = useState([0, 0]);

  useEffect(() => {
    setIds(getOptionsForVote());
  }, []);
    console.log(...ids);
  
  const jjba = trpc.data.getJJBAData.useQuery();
  const handleOpClick = (e: React.MouseEvent<HTMLButtonElement>) => {
    console.log("Clicked!", e);
    console.log(jjba.data);
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="m-auto flex h-screen max-w-screen-sm flex-col justify-center gap-6">
        <div className="justify-right absolute top-0 right-0 flex flex-col p-4">
          <div className="title text-center text-4xl">OP-T3</div>
          {/* <img className="w-6" src={menacing.src} alt="" /> */}
        </div>
        <div className="text-center text-2xl">Which Stand is more OP?</div>
        <div className="flex items-center justify-around p-8">
          <div className="flex flex-col items-center">
            {ids[0]}
            <div className="stand-name mb-8 text-xl">Star Platinum</div>
            <div className="stand-picture-container relative mb-4 h-64 w-52">
              <Image
                className="rendering-pixelated rounded drop-shadow-2xl"
                src="https://static.jojowiki.com/images/thumb/c/ca/latest/20200927002609/Star_Platinum_SC_Infobox_Anime.png/200px-Star_Platinum_SC_Infobox_Anime.png"
                alt="Star"
                layout="fill"
                objectFit="contain"
              />
            </div>
            <button
              className="rounded-full border bg-slate-50  py-1 px-8 text-black hover:bg-slate-200"
              onClick={handleOpClick}
            >
              OP
            </button>
          </div>
          <div className="p-8 italic">or</div>
          <div className="flex flex-col items-center">
            {ids[1]}
            <div className="stand-name mb-8 text-xl">The World</div>
            <div className="stand-picture-container relative mb-4 h-64 w-52 ">
              <Image
                className="rendering-pixelated rounded drop-shadow-2xl"
                src="https://static.jojowiki.com/images/thumb/7/7e/latest/20191015213103/The_World_Infobox_Anime.png/200px-The_World_Infobox_Anime.png"
                alt="World"
                layout="fill"
                objectFit="contain"
              />
            </div>
            <button className="rounded-full border bg-slate-50  py-1 px-8 text-black hover:bg-slate-200">
              OP
            </button>
          </div>
        </div>
      </div>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
